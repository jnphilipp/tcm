#!/usr/bin/env python3
# Copyright (C) 2023-2024 J. Nathanael Philipp (jnphilipp) <nathanael@philipp.land>
#
# This file is part of tcm.
#
# tcm is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# tcm is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with tcm. If not, see <http://www.gnu.org/licenses/>
"""Tests for tcm."""


import numpy as np
import unittest

from collections import Counter
from scipy.sparse import csr_matrix
from tcm import TopicContextModel


class TopicContextModelTests(unittest.TestCase):
    """TopicContextModel tests."""

    def setUp(self) -> None:
        """"""
        self.texts = [
            [
                "lorem",
                "ipsum",
                "dolor",
                "sit",
                "amet",
                "consectetur",
                "adipiscing",
                "elit",
                "sed",
                "do",
                "eiusmod",
                "tempor",
                "incididunt",
                "ut",
                "labore",
                "et",
                "dolore",
                "magna",
                "aliqua",
                "lectus",
                "vitae",
                "mi",
                "mauris",
                "facilisis",
                "luctus",
                "posuere",
                "elementum",
                "cursus",
                "fermentum",
                "non",
                "massa",
                "litora",
                "ultricies",
                "donec",
                "consectetur",
                "lectus",
                "sodales",
                "elementum",
                "facilisis",
                "fermentum",
                "senectus",
                "et",
                "mi",
                "lobortis",
                "iaculis",
                "fermentum",
                "ante",
                "consequat",
                "aptent",
                "quam",
                "ultricies",
                "sed",
                "libero",
            ],
            [
                "convallis",
                "fringilla",
                "dignissim",
                "massa",
                "arcu",
                "posuere",
                "in",
                "imperdiet",
                "eu",
                "at",
                "aenean",
                "sit",
                "sollicitudin",
                "arcu",
                "consectetur",
                "bibendum",
                "a",
                "class",
                "consequat",
                "nulla",
                "fusce",
                "donec",
                "fringilla",
                "lobortis",
                "vehicula",
                "tristique",
                "hac",
                "vestibulum",
                "aenean",
                "fusce",
                "hac",
                "eros",
                "pulvinar",
                "cubilia",
                "ultricies",
                "bibendum",
                "tempor",
                "at",
                "gravida",
                "malesuada",
            ],
            [
                "quam",
                "nullam",
                "eget",
                "est",
                "ac",
                "fusce",
                "elit",
                "eros",
                "tellus",
                "facilisis",
                "malesuada",
                "hendrerit",
                "lectus",
                "dictumst",
                "praesent",
                "sodales",
                "augue",
                "netus",
                "nullam",
                "eget",
                "justo",
                "duis",
                "nulla",
                "eros",
                "potenti",
                "at",
            ],
            [
                "sagittis",
                "non",
                "nullam",
                "maximus",
                "purus",
                "nisi",
                "ante",
                "sollicitudin",
                "etiam",
                "urna",
                "volutpat",
                "mauris",
                "semper",
                "sollicitudin",
                "felis",
                "aliquet",
                "nullam",
                "praesent",
                "vel",
                "curabitur",
                "habitasse",
                "condimentum",
                "metus",
                "eu",
                "pretium",
                "maximus",
                "tristique",
                "litora",
                "nisl",
                "quam",
                "purus",
                "facilisis",
                "laoreet",
                "dignissim",
            ],
            [
                "dui",
                "proin",
                "adipiscing",
                "consequat",
                "felis",
                "amet",
                "laoreet",
                "blandit",
                "laoreet",
                "porttitor",
                "litora",
                "in",
                "orci",
                "quis",
                "himenaeos",
                "nam",
                "adipiscing",
                "nisi",
                "metus",
                "pulvinar",
                "ante",
                "dignissim",
                "dolor",
                "dapibus",
                "a",
                "vivamus",
                "nisi",
            ],
            [
                "sit",
                "dapibus",
                "neque",
                "sapien",
                "cubilia",
                "porttitor",
                "egestas",
                "proin",
                "nunc",
                "purus",
                "nisi",
                "dapibus",
                "nunc",
                "venenatis",
                "cras",
                "mauris",
                "suscipit",
                "pellentesque",
                "netus",
                "porta",
                "vitae",
                "fermentum",
                "turpis",
                "arcu",
                "odio",
                "duis",
                "erat",
                "proin",
                "tellus",
                "lectus",
                "etiam",
                "vitae",
                "pulvinar",
                "magna",
                "turpis",
                "velit",
                "curabitur",
                "mauris",
                "suscipit",
                "turpis",
                "congue",
                "dui",
                "suscipit",
                "neque",
                "quam",
                "amet",
                "vestibulum",
                "quam",
                "class",
                "suspendisse",
                "torquent",
                "risus",
                "nisi",
                "laoreet",
                "tellus",
                "lectus",
                "interdum",
                "habitant",
                "molestie",
                "commodo",
                "tristique",
                "scelerisque",
            ],
            [
                "malesuada",
                "curabitur",
                "erat",
                "mauris",
                "tempor",
                "vel",
                "leo",
                "condimentum",
                "class",
                "pharetra",
                "platea",
                "justo",
                "rutrum",
                "egestas",
                "magna",
                "interdum",
                "per",
                "dolor",
                "aliquet",
                "vitae",
                "hac",
                "eleifend",
                "torquent",
                "maximus",
                "felis",
                "nullam",
                "ante",
                "elit",
                "etiam",
                "nisl",
                "mattis",
                "consectetur",
                "ipsum",
                "nisl",
                "semper",
                "accumsan",
            ],
            [
                "diam",
                "pulvinar",
                "conubia",
                "purus",
                "libero",
                "consequat",
                "turpis",
                "vulputate",
                "hac",
                "donec",
                "porttitor",
                "eleifend",
                "rhoncus",
                "volutpat",
                "leo",
                "sapien",
                "condimentum",
                "conubia",
                "rhoncus",
                "torquent",
                "commodo",
                "non",
            ],
            [
                "morbi",
                "etiam",
                "porta",
                "ornare",
                "posuere",
                "integer",
                "etiam",
                "purus",
                "pulvinar",
                "nullam",
                "justo",
                "amet",
                "arcu",
                "dictum",
                "vitae",
                "quisque",
                "etiam",
            ],
            [
                "feugiat",
                "massa",
                "maximus",
                "ultrices",
                "ipsum",
                "nec",
                "dui",
                "enim",
                "orci",
                "convallis",
                "est",
                "rhoncus",
                "nisi",
                "congue",
                "felis",
                "nisi",
                "euismod",
            ],
        ]
        self.words = list(set(w for text in self.texts for w in text))
        vocab = dict((w, i) for i, w in enumerate(self.words))

        data = []
        indices = []
        indptr = [0]
        for text in self.texts:
            counter: Counter = Counter()
            counter.update(text)

            for k, v in counter.items():
                idx = vocab[k]
                data.append(v)
                indices.append(idx)
            indptr.append(len(indices))
        self.data = csr_matrix(
            (data, indices, indptr),
            shape=(len(indptr) - 1, len(vocab)),
            dtype=np.uint,
        )

    def test_tcm_lda(self) -> None:
        """Test encryption and decryption."""

        tcm = TopicContextModel.LatentDirichletAllocation(
            self.words,
            n_components=10,
            random_state=12345,
        )
        tcm.fit(self.data)
        surprisal_data = tcm.surprisal(self.data)
        self.assertEqual(surprisal_data.shape, (10, 152))

    def test_tcm_lsa(self) -> None:
        """Test encryption and decryption."""

        tcm = TopicContextModel.LatentSemanticAnalysis(
            self.words,
            random_state=12345,
        )
        tcm.fit(self.data)
        surprisal_data = tcm.surprisal(self.data)
        self.assertEqual(surprisal_data.shape, (10, 152))


if __name__ == "__main__":
    unittest.main()
